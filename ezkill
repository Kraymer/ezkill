#!/bin/bash

# Copyright (c) 2017-2018 Fabrice Laporte - kray.me
# The MIT License http://www.opensource.org/licenses/mit-license.php

# ezkill
# Kill processes selectively by matching any part of the name.

readonly PROGNAME=$(basename $0)

usage() {
    cat << EOF
USAGE: $PROGNAME [-s signal_name] pattern

    $PROGNAME searches the process table on the running system and lists identifiers for all
    processes that match the criteria given on the command line.
    It then prompt you for which processes to signal.

    OPTIONS:
        see 'kill' USAGE
EOF
}

# Print array elements, one per line, prefixed by a letter identifier from a to z.
# Alternate lines background colours for best readability.
#
# $@ - array to print
print_alternate()
{
    ps_grep_lines=("$@")
    if [ ${#ps_grep_lines[@]} -eq 0 ]; then
        echo "No processes found."
        exit 0
    fi
    CTRL_REVERSE="\e[7m"
    CTRL_RESET="\e[27m"
    LINE_IDX=a
    for ((i = 0; i < ${#ps_grep_lines[@]}; ++i)); do
        cmd=`echo ${ps_grep_lines[$i]} | cut -f 2-99 -d " " | cut -c 1-128`
        ((i % 2 == 0)) && printf "${LINE_IDX}"
        ((i % 2 != 0)) && printf "${CTRL_REVERSE}${LINE_IDX}${CTRL_RESET}"
        echo " ${cmd}"
        LINE_IDX=$(echo "$LINE_IDX" | tr "0-9a-z" "1-9a-z_")  # alpha increment
        if [ $i -eq 25 ]; then
            echo '...'
            break
        fi
    done
}

ezkill() {
    killargs=${@:1:$#-1}  # all args but last
    while IFS= read -r line; do
        ps_grep_lines+=("$line")
    done < <( ps -eo pid,command | grep -e "${@: -1}" | grep -v "$0" )
    unset "ps_grep_lines[${#ps_grep_lines[@]}-1]"  # remove last element which is our own grep
    print_alternate "${ps_grep_lines[@]}"
    echo " "
    read -p "Send signal to process(es): " cmd_ids
    for (( i=0; i<${#cmd_ids}; i++ )); do
        ascii_cmd_id=`printf "${cmd_ids:$i:1}" | od -A n -t d1`
        idx=`expr $ascii_cmd_id - 97`
        pid=`echo ${ps_grep_lines[$idx]} | cut -f 1 -d " "`
        cmd=`echo ${ps_grep_lines[$idx]} | cut -f 2 -d " "`
        kill $killargs $pid
        echo "killed" $cmd "(pid" $pid")"
    done
}


main() {
    if [ "$#" -eq 0 ] || [ "$1" == "-h" ]; then
      usage
      exit 0
    fi
    ezkill $@
}
main $@
